name: E2E

on:
  workflow_dispatch:
    inputs:
      install_whoami:
        description: With WhoAmI
        default: false
        type: boolean
      install_grafana_backend:
        description: With Grafana backend
        default: false
        type: boolean
      install_metrics:
        description: With Metrics Server
        default: false
        type: boolean
      install_linkerd :
        description: With LinkerD
        default: false
        type: boolean
      install_traefik:
        description: With Traefik
        default: false
        type: boolean
      install_seq:
        description: With Seq
        default: false
        type: boolean
      install_jaeger:
        description: With Jaeger
        default: false
        type: boolean
      install_elasticsearch:
        description: With Elastic Backend
        default: false
        type: boolean
      install_redis:
        description: With Redis
        default: false
        type: boolean
      install_vault:
        description: With Vault
        default: false
        type: boolean
      install_etcd:
        description: With Etcd
        default: false
        type: boolean
      install_identityserver4admin:
        description: With IdentityServer4
        default: false
        type: boolean
      install_keycloak:
        description: With Keycloak
        default: false
        type: boolean
      install_minio:
        description: With Minio
        default: false
        type: boolean
      install_azurite:
        description: With Azurite
        default: false
        type: boolean
      install_docker_registry:
        description: With DockerRegistry UI
        default: false
        type: boolean
      install_rabbitmq:
        description: With RabbitMq
        default: false
        type: boolean
      install_localstack:
        description: With Localstack
        default: false
        type: boolean
      install_kafka:
        description: With Kafka
        default: false
        type: boolean
      install_argocd:
        description: With ArgoCD
        default: false
        type: boolean
      install_flux2:
        description: With Flux2
        default: false
        type: boolean
      install_mysql:
        description: With MySQL
        default: false
        type: boolean
      install_mariadb:
        description: With MariaDB
        default: false
        type: boolean
      install_postgres:
        description: With Postgres
        default: false
        type: boolean
      install_mssql:
        description: With MSSQL
        default: false
        type: boolean
      install_mongodb:
        description: With MongoDB
        default: false
        type: boolean
      install_oracle:
        description: With Oracle
        default: false
        type: boolean
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write

jobs:
  e2e:
    strategy:
      matrix:
        cluster: [k3s, kind]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Add hosts to /etc/hosts
        run: |
          sudo echo "127.0.0.1 k8s.local infrastructure.k8s.local traefik.infrastructure.k8s.local traefik.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 jaeger.infrastructure.k8s.local prometheus.infrastructure.k8s.local seq.infrastructure.k8s.local grafana.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 consul.infrastructure.k8s.local vault.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 es.infrastructure.k8s.local kibana.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 login.k8s.local admin.login.k8s.local api.login.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 app1.k8s.local api.app1.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 argo.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 linkerd.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 whoami1.k8s.local whoami2.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 keycloak.k8s.local auth.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 etcd.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 minio.infrastructure.k8s.local console.minio.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 azurite.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 rabbitmq.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 localstack.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 flux.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 kafka.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 mysql.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 mariadb.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 postgres.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 mssql.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 oracle.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 mongo.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 oracle.infrastructure.k8s.local" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 redis.infrastructure.k8s.local" | sudo tee -a /etc/hosts

      - name: Installing prerequisites
        run: |
          sudo apt-get install -y apt-transport-https ca-certificates curl wget libnss3-tools cl-base64
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform

      - name: Install mkcert
        run: |
          curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
          chmod +x mkcert-v*-linux-amd64
          sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert

      - name: Generate self-signed certificate
        run: |
          cd ./src/terraform
          chmod +x ./generate_certificate.sh
          ./generate_certificate.sh

      - name: Create env file for terraform validation
        run: |
          touch src/terraform/.env
          echo GITHUB_OWNER=somebody >> src/terraform/.env
          echo GITHUB_TOKEN=sometoken >> src/terraform/.env
          echo ORACLE_EMAIL=someemail >> src/terraform/.env
          echo ORACLE_PASSWORD=somepassword >> src/terraform/.env

      - name: Setup K3S Cluster
        uses: nolar/setup-k3d-k3s@v1
        if: ${{ matrix.cluster == 'k3s' }}
        with:
          version: v1.25.4+k3s1  # E.g.: v1.21, v1.21.2, v1.21.2+k3s1
          k3d-args: '--config=src/tests/k3s/k3s-devinfra.yaml'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Kind Cluster
        if: ${{ matrix.cluster == 'kind' }}
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: kind-devinfra
          config: src/tests/kind/kind-config.yaml

      - name: Testing connectivity
        run: |
          kubectl cluster-info
          kubectl get namespace
          kubectl get pods --all-namespaces
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
          kubectl cluster-info dump

      - name: Terraform apply
        run: |
          cd ./src/terraform
          terraform init --upgrade
          terraform apply -var-file="../tests/${{ matrix.cluster }}/terraform.tfvars" --auto-approve
        env:
          TF_VAR_install_opentelemetry: ${{ inputs.install_grafana_backend  || false }}
          TF_VAR_install_loki: ${{ inputs.install_grafana_backend  || false }}
          TF_VAR_install_promtail: ${{ inputs.install_grafana_backend  || false }}
          TF_VAR_install_tempo: ${{ inputs.install_grafana_backend  || false }}
          TF_VAR_install_prometheus: ${{ inputs.install_grafana_backend  || false }}
          TF_VAR_install_grafana: ${{ inputs.install_grafana_backend  || false }}
          TF_VAR_install_metrics: ${{ inputs.install_metrics  || false }}
          TF_VAR_install_linkerd : ${{ inputs.install_linkerd || false}}
          TF_VAR_install_traefik: ${{ inputs.install_traefik || false}}
          TF_VAR_install_seq: ${{ inputs.install_seq || false}}
          TF_VAR_install_jaeger: ${{ inputs.install_jaeger || false}}
          TF_VAR_install_elasticsearch: ${{ inputs.install_elasticsearch || false}}
          TF_VAR_install_kibana: ${{ inputs.install_elasticsearch || false}}
          TF_VAR_install_redis: ${{ inputs.install_redis || false}}
          TF_VAR_install_vault: ${{ inputs.install_vault || false}}
          TF_VAR_install_etcd: ${{ inputs.install_etcd || false}}
          TF_VAR_install_identityserver4admin: ${{ inputs.install_identityserver4admin || false}}
          TF_VAR_install_keycloak: ${{ inputs.install_keycloak || false}}
          TF_VAR_install_minio: ${{ inputs.install_minio || false}}
          TF_VAR_install_azurite: ${{ inputs.install_azurite || false}}
          TF_VAR_install_docker_registry: ${{ inputs.install_docker_registry || false}}
          TF_VAR_install_rabbitmq: ${{ inputs.install_rabbitmq || false}}
          TF_VAR_install_localstack: ${{ inputs.install_localstack || false}}
          TF_VAR_install_kafka: ${{ inputs.install_kafka || false}}
          TF_VAR_install_argocd: ${{ inputs.install_argocd || false}}
          TF_VAR_install_flux2: ${{ inputs.install_flux2 || false}}
          TF_VAR_install_mysql: ${{ inputs.install_mysql || false}}
          TF_VAR_install_mariadb: ${{ inputs.install_mariadb || false}}
          TF_VAR_install_postgres: ${{ inputs.install_postgres || false}}
          TF_VAR_install_mssql: ${{ inputs.install_mssql || false}}
          TF_VAR_install_mongodb: ${{ inputs.install_mongodb || false}}
          TF_VAR_install_oracle: ${{ inputs.install_oracle || false}}
          TF_VAR_install_whoami: ${{ inputs.install_whoami || false}}

      - name: Await deployment traefik
        uses: jupyterhub/action-k8s-await-workloads@v1
        with:
          workloads: "" # all
          namespace: "traefik"
          timeout: 300
          max-restarts: 0

      - name: Kubernetes namespace report (traefik)
        uses: jupyterhub/action-k8s-namespace-report@v1
        if: always()
        with:
          namespace: traefik

      - name: Await deployment whoami
        uses: jupyterhub/action-k8s-await-workloads@v1
        with:
          workloads: "" # all
          namespace: "whoami" # default
          timeout: 300
          max-restarts: 0

      - name: Kubernetes namespace report (whoami)
        uses: jupyterhub/action-k8s-namespace-report@v1
        if: always()
        with:
          namespace: whoami

      - name: Run plain curl
        run: |
          curl https://whoami1.k8s.local

      - name: Run newman tests
        uses: matt-ball/newman-action@master
        with:
          collection: ./src/tests/k8s-dev-infrastructure.postman_collection.json
          environment: ./src/tests/k8s.local.postman_environment.json