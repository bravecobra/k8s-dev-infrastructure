# k3d configuration file, saved as e.g. /home/me/myk3dcluster.yaml
apiVersion: k3d.io/v1alpha4 # this will change in the future as we make everything more stable
kind: Simple # internally, we also have a Cluster config, which is not yet available externally
servers: ${server-node-count} # same as `--servers 1`
agents: ${worker-node-count} # same as `--agents 2`
kubeAPI: # same as `--api-port myhost.my.domain:6445` (where the name would resolve to 127.0.0.1)
  host: "${cluster-domain}" # important for the `server` setting in the kubeconfig
  hostIP: "${cluster-ip}" # where the Kubernetes API will be listening on
  hostPort: "${cluster-port}" # where the Kubernetes API listening port will be mapped to on your host system
image: rancher/k3s:${k3s-version} # same as `--image rancher/k3s:v1.20.4-k3s1`
network: ${network} # same as `--network my-custom-net`
# subnet: "172.28.0.0/16" # same as `--subnet 172.28.0.0/16`
token: superSecretToken # same as `--token superSecretToken`
# volumes: # repeatable flags are represented as YAML lists
#   - volume: /my/host/path:/path/in/node # same as `--volume '/my/host/path:/path/in/node@server:0;agent:*'`
#     nodeFilters:
#       - server:0
#       - agent:*
ports:
  - port: 80:80 # same as `--port '80:80@loadbalancer'`
    nodeFilters:
      - loadbalancer
  - port: 443:443 # same as `--port '443:443@loadbalancer'`
    nodeFilters:
      - loadbalancer
  - port: 8100:8100 # same as `--port '8100:8100@loadbalancer'`
    nodeFilters:
      - loadbalancer

#%{ if expose_azurite == true }
  - port: 10000:10000 # same as `--port '10000:10000@loadbalancer'`
    nodeFilters:
      - loadbalancer
  - port: 10001:10001 # same as `--port '10001:10001@loadbalancer'`
    nodeFilters:
      - loadbalancer
  - port: 10002:10002 # same as `--port '10002:10002@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_seq == true }
  - port: 5341:5341 # same as `--port '5341:5341@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_opentelemetry == true }
  - port: 4317:4317 # same as `--port '4317:4317@loadbalancer'`
    nodeFilters:
      - loadbalancer
  - port: 4318:4318 # same as `--port '4318:4318@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_jaeger == true }
  - port: 6831:6831 # same as `--port '6831:6831@loadbalancer'`
    nodeFilters:
      - loadbalancer
  - port: 6832:6832 # same as `--port '6832:6832@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_rabbitmq == true }
  - port: 5672:5672 # same as `--port '5672:5672@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_loki == true }
  - port: 3100:3100 # same as `--port '3100:3100@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_rds_mssql == true }
  - port: 1433:1433 # same as `--port '1433:1433@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_rds_oracle == true }
  - port: 1521:1521 # same as `--port '1521:1521@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_rds_mysql == true }
  - port: 3306:3306 # same as `--port '3306:3306@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_rds_mysql == true }
  - port: 3307:3307 # same as `--port '3306:3306@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_rds_postgres == true }
  - port: 5432:5432 # same as `--port '5432:5432@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

#%{ if expose_nosql_mongodb == true }
  - port: 27017:27017 # same as `--port '27017:27017@loadbalancer'`
    nodeFilters:
      - loadbalancer
#%{ endif }

# env:
#   - envVar: bar=baz # same as `--env 'bar=baz@server:0'`
#     nodeFilters:
#       - server:0
registries: # define how registries should be created or used
  create: # creates a default registry to be used with the cluster; same as `--registry-create registry.localhost`
    name: registry.localhost
    host: "0.0.0.0"
    hostPort: "5000"
#   use:
#     - k3d-myotherregistry:5000 # some other k3d-managed registry; same as `--registry-use 'k3d-myotherregistry:5000'`
#   config: | # define contents of the `registries.yaml` file (or reference a file); same as `--registry-config /path/to/config.yaml`
#     mirrors:
#       "my.company.registry":
#         endpoint:
#           - http://my.company.registry:5000
options:
  k3d: # k3d runtime settings
    wait: true # wait for cluster to be usable before returining; same as `--wait` (default: true)
    timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
    disableLoadbalancer: false # same as `--no-lb`
    disableImageVolume: false # same as `--no-image-volume`
    disableRollback: false # same as `--no-Rollback`
    loadbalancer:
      configOverrides:
        - settings.workerConnections=2048
  k3s:
    extraArgs:
      # - arg: --cluster-cidr=172.18.0.0/16
      #   nodeFilters:
      #     - server:*
      - arg: --disable=traefik
        nodeFilters:
          - server:*
      - arg: --disable=metrics-server
        nodeFilters:
          - server:*
  # k3s: # options passed on to K3s itself
  #   extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
  #     - arg: --tls-san=my.host.domain
  #       nodeFilters:
  #         - server:*
  #   nodeLabels:
  #     - label: foo=bar # same as `--k3s-node-label 'foo=bar@agent:1'` -> this results in a Kubernetes node label
  #       nodeFilters:
  #         - agent:1
  # kubeconfig:
  #   updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
  #   switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
  # runtime: # runtime (docker) specific options
  #   gpuRequest: all # same as `--gpus all`
  #   labels:
  #     - label: bar=baz # same as `--runtime-label 'bar=baz@agent:1'` -> this results in a runtime (docker) container label
  #       nodeFilters:
  #         - agent:1
