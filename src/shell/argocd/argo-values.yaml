global:
  image:
    tag: v2.0.3
server:
  # resources:
  #   limits:
  #     cpu: 200m
  #     memory: 256Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi
  ingress:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
      traefik.ingress.kubernetes.io/router.middlewares: default-redirect-http@kubernetescrd
    labels: {}
    hosts:
      - argo.k8s.local
    paths:
      - /
    extraPaths:
      - path: /*
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              number: 443
    tls:
      - secretName: argocd-tls-certificate
        hosts:
          - argo.k8s.local
    https: true
  ingressGrpc:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
      traefik.ingress.kubernetes.io/router.middlewares: default-redirect-http@kubernetescrd
    labels: {}
    hosts:
      - argo.k8s.local
    paths:
      - /
    extraPaths:
      - path: /*
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              number: 443
    tls:
      - secretName: argocd-tls-certificate
        hosts:
          - argo.k8s.local
    https: true
  extraArgs: []
    # - --insecure
  certificate:
    enabled: true
    domain: argo.k8s.local
    issuer:
      kind: ClusterIssuer
      name: selfsigned-ca-issuer
    additionalHosts: []
    secretName: argocd-tls-certificate
  config:
    url: https://argo.k8s.local
    repositories: |
      - type: helm
        name: stable
        url: https://charts.helm.sh/stable
      - type: helm
        name: argo-cd
        url: https://argoproj.github.io/argo-helm
      - type: helm
        name: cert-manager
        url: https://charts.jetstack.io
      - type: helm
        name: traefik
        url: https://helm.traefik.io/traefik
    resource.customizations: |
      argoproj.io/Application:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.health ~= nil then
              hs.status = obj.status.health.status
              if obj.status.health.message ~= nil then
                hs.message = obj.status.health.message
              end
            end
          end
          return hs
      jaegertracing.io/Jaeger:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
      admissionregistration.k8s.io/ValidatingWebhookConfiguration:
        ignoreDifferences: |
          jsonPointers:
          - /webhooks/0/clientConfig/caBundle
          - /webhooks/1/clientConfig/caBundle
          - /webhooks/2/clientConfig/caBundle
          - /webhooks/3/clientConfig/caBundle
          - /webhooks/4/clientConfig/caBundle
          - /webhooks/5/clientConfig/caBundle
          - /webhooks/6/clientConfig/caBundle
          - /webhooks/7/clientConfig/caBundle
          - /webhooks/8/clientConfig/caBundle
          - /webhooks/9/clientConfig/caBundle
      admissionregistration.k8s.io/MutatingWebhookConfiguration:
        ignoreDifferences: |
          jsonPointers:
          - /webhooks/0/clientConfig/caBundle
          - /webhooks/1/clientConfig/caBundle
          - /webhooks/2/clientConfig/caBundle
          - /webhooks/3/clientConfig/caBundle
          - /webhooks/4/clientConfig/caBundle
          - /webhooks/5/clientConfig/caBundle
          - /webhooks/6/clientConfig/caBundle
          - /webhooks/7/clientConfig/caBundle
  metrics:
    enabled: true
    service:
      annotations: {}
      labels: {}
      servicePort: 8082
    serviceMonitor:
      namespace: argocd
      enabled: true
      interval: 30s
      additionalLabels :
        release: prometheus
    # selector:
    #   prometheus: prometheus-kube-prometheus-prometheus
    #   namespace: prometheus
    #   additionalLabels: {}

controller:
  metrics:
    enabled: true
    service:
      annotations: {}
      labels: {}
      servicePort: 8082
    serviceMonitor:
      namespace: argocd
      enabled: true
      interval: 30s
      additionalLabels :
        release: prometheus
  # resources:
  #   limits:
  #     cpu: 500m
  #     memory: 1Gi
  #   requests:
  #     cpu: 250m
  #     memory: 500Mi
dex:
  enabled: false
  # resources:
  #  limits:
  #    cpu: 50m
  #    memory: 64Mi
  #  requests:
  #    cpu: 10m
  #    memory: 32Mi
redis:
  metrics:
    enabled: true
    service:
      annotations: {}
      labels: {}
      servicePort: 8082
    serviceMonitor:
      namespace: argocd
      enabled: true
      interval: 30s
      additionalLabels :
        release: prometheus
  # resources:
  #  limits:
  #    cpu: 200m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 64Mi
repoServer:
  metrics:
    enabled: true
    service:
      annotations: {}
      labels: {}
      servicePort: 8082
    serviceMonitor:
      namespace: argocd
      enabled: true
      interval: 30s
      additionalLabels :
        release: prometheus
  # resources:
  #   limits:
  #     cpu: 50m
  #     memory: 128Mi
  #   requests:
  #     cpu: 10m
  #     memory: 64Mi